# main.py

import json
import sys
import pandas as pd  # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∏–º–ø–æ—Ä—Ç –Ω–∞–≤–µ—Ä—Ö!
from api.moex_api import MoexAPI
from models.bond import Bond
from analyzers.bond_analyzer import BondAnalyzer
from config import ANALYSIS_SETTINGS


def safe_float(value, default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float."""
    if value is None or (isinstance(value, str) and value.strip() in ('', '-', 'None')):
        return default
    try:
        return float(value)
    except (ValueError, TypeError):
        return default


def create_bond_objects(df) -> list:
    bonds = []
    skipped = 0
    for idx, row in df.iterrows():
        try:
            secid = row.get('SECID')
            isin = row.get('ISIN')
            name = row.get('NAME')
            faceunit = row.get('FACEUNIT', 'SUR')
            maturity_date = row.get('MATDATE')

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
            if not secid or not isin or not name or not maturity_date:
                skipped += 1
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã –ø–æ–≥–∞—à–µ–Ω–∏—è
            if maturity_date == "0000-00-00" or not maturity_date.replace('-', '').isdigit():
                skipped += 1
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–∏–Ω–∞–ª –≤ —Ä—É–±–ª—è—Ö
            facevalue_raw = safe_float(row.get('FACEVALUE'))
            if facevalue_raw is None:
                skipped += 1
                continue

            # –ï—Å–ª–∏ FACEUNIT = 'PCNT', —Ç–æ –Ω–æ–º–∏–Ω–∞–ª = 1000 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –æ–±–ª–∏–≥–∞—Ü–∏–π –†–§)
            # –ù–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ %, —Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–∏–Ω–∞–ª ‚Äî 1000 —Ä—É–±.
            if faceunit == 'PCNT':
                nominal = 1000.0
            else:
                nominal = facevalue_raw

            # –¶–µ–Ω–∞
            price = safe_float(row.get('MARKETPRICE'))
            if price is None:
                price = safe_float(row.get('LAST'))
            if price is None or price <= 0:
                skipped += 1
                continue

            # –ù–ö–î
            accrued_interest = safe_float(row.get('ACCRUEDINT'), 0.0)

            # –û–±—ä—ë–º
            volume_rub = safe_float(row.get('VOLRUR'), 0.0)
            if volume_rub == 0:
                volume_rub = safe_float(row.get('VALTODAY'), 0.0)

            # –ö—É–ø–æ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞
            coupon_rate = safe_float(row.get('COUPON_PERCENT'))

            # –ü–æ–ª—É—á–∞–µ–º –∫—É–ø–æ–Ω—ã
            coupon_periods = MoexAPI.fetch_coupon_periods(isin)

            bond = Bond(
                secid=secid,
                isin=isin,
                name=str(name),
                price=price,
                nominal=nominal,
                coupon_rate=coupon_rate,
                maturity_date=maturity_date,
                accrued_interest=accrued_interest,
                volume_rub=volume_rub,
                coupon_periods=coupon_periods
            )
            bonds.append(bond)

        except Exception as e:
            skipped += 1
            # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:
            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")
            continue

    print(f"   ‚Üí –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped} —Å—Ç—Ä–æ–∫ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    return bonds


def main():
    print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏...")
    try:
        df = MoexAPI.fetch_bonds_list()
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(df)} –æ–±–ª–∏–≥–∞—Ü–∏–π.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", file=sys.stderr)
        sys.exit(1)

    print("üì¶ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç—ã Bond...")
    bonds = create_bond_objects(df)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(bonds)} –≤–∞–ª–∏–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±–ª–∏–≥–∞—Ü–∏–π.")

    if not bonds:
        print("‚ö†Ô∏è –ù–µ—Ç –æ–±–ª–∏–≥–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   - –£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç (—É–±—Ä–∞—Ç—å limit –≤ config)")
        print("   - –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã (min_volume_rub=0 –∏ —Ç.–¥.)")
        return

    print("üìä –ê–Ω–∞–ª–∏–∑ –æ–±–ª–∏–≥–∞—Ü–∏–π...")
    analyzer = BondAnalyzer(settings=ANALYSIS_SETTINGS)
    best_bonds = analyzer.analyze(bonds)

    if not best_bonds:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±–ª–∏–≥–∞—Ü–∏–π, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
        print("   –°–æ–≤–µ—Ç: –≤—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 'min_yield': -1 –∏ 'min_volume_rub': 0 –≤ config.py")
        return

    print("\n" + "="*80)
    print("üèÜ –°–ê–ú–ê–Ø –í–´–ì–û–î–ù–ê–Ø –û–ë–õ–ò–ì–ê–¶–ò–Ø:")
    print("="*80)

    best = best_bonds[0]
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ:       {best.name}")
    print(f"ISIN:           {best.isin}")
    print(f"–¶–µ–Ω–∞ (–≥—Ä—è–∑–Ω–∞—è): {best.price:.2f} ‚ÇΩ")
    print(f"–ß–∏—Å—Ç–∞—è —Ü–µ–Ω–∞:    {best.clean_price:.2f} ‚ÇΩ")
    print(f"–ù–ö–î:            {best.accrued_interest:.2f} ‚ÇΩ")
    print(f"–ù–æ–º–∏–Ω–∞–ª:        {best.nominal:.2f} ‚ÇΩ")
    print(f"–ö—É–ø–æ–Ω (% –≥–æ–¥):  {best.coupon_rate if best.coupon_rate else '‚Äî'}")
    print(f"–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {best.maturity_date}")
    print(f"–°—Ä–æ–∫ –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è: {best.years_to_maturity:.2f} –ª–µ—Ç")
    print(f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (YTM): {best.yield_to_maturity * 100:.2f}% –≥–æ–¥–æ–≤—ã—Ö")
    print(f"–û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤:   {best.volume_rub:,.0f} ‚ÇΩ")
    print(f"SECID:          {best.secid}")

    print("\nüìÑ JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(json.dumps(best.to_dict(), ensure_ascii=False, indent=2))


if __name__ == "__main__":
    main()